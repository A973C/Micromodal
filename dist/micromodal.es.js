var version="0.3.0";const MicroModal=(()=>{const e=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'];class o{constructor({targetModal:targetModal,triggers:triggers=[],onShow:onShow=(()=>{}),onClose:onClose=(()=>{}),openTrigger:openTrigger="data-micromodal-trigger",closeTrigger:closeTrigger="data-micromodal-close",disableScroll:disableScroll=!1,disableFocus:disableFocus=!1,hasAnimation:hasAnimation=!1,debugMode:debugMode=!1}){this.modal=document.getElementById(targetModal),this.config={debugMode:debugMode,disableScroll:disableScroll,openTrigger:openTrigger,closeTrigger:closeTrigger,onShow:onShow,onClose:onClose,hasAnimation:hasAnimation,disableFocus:disableFocus},triggers.length>0&&this.registerTriggers(...triggers),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}registerTriggers(...e){e.forEach(e=>{e.addEventListener("click",()=>this.showModal())})}showModal(){this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add("is-open"),this.setFocusToFirstNode(),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.onShow(this.modal)}closeModal(){const e=this.modal;this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement.focus(),this.config.onClose(this.modal),this.config.hasAnimation?this.modal.addEventListener("animationend",function o(){e.classList.remove("is-open"),e.removeEventListener("animationend",o,!1)},!1):e.classList.remove("is-open")}scrollBehaviour(e){if(this.config.disableScroll){const o=document.querySelector("body");switch(e){case"enable":Object.assign(o.style,{overflow:"",height:""});break;case"disable":Object.assign(o.style,{overflow:"hidden",height:"100vh"})}}}addEventListeners(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}removeEventListeners(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}onClick(e){e.target.hasAttribute(this.config.closeTrigger)&&(this.closeModal(),e.preventDefault())}onKeydown(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.maintainFocus(e)}getFocusableNodes(){const o=this.modal.querySelectorAll(e);return Object.keys(o).map(e=>o[e])}setFocusToFirstNode(){if(!this.config.disableFocus){const e=this.getFocusableNodes();e.length&&e[0].focus()}}maintainFocus(e){const o=this.getFocusableNodes();if(this.modal.contains(document.activeElement)){const t=o.indexOf(document.activeElement);e.shiftKey&&0===t&&(o[o.length-1].focus(),e.preventDefault()),e.shiftKey||t!==o.length-1||(o[0].focus(),e.preventDefault())}else o[0].focus()}}let t=null;const n=(e,o)=>{const t=[];e.forEach(e=>{const n=e.attributes[o].value;void 0===t[n]&&(t[n]=[]);t[n].push(e)});return t};const i=e=>{if(!document.getElementById(e))return console.warn(`MicroModal v${version}: ❗Seems like you have missed %c'${e}'`,"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn(`%cExample:`,"background-color: #f8f9fa;color: #50596c;font-weight: bold;",`<div class="modal" id="${e}"></div>`),!1};const s=e=>{if(e.length<=0)return console.warn(`MicroModal v${version}: ❗Please specify at least one %c'micromodal-trigger'`,"background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn(`%cExample:`,"background-color: #f8f9fa;color: #50596c;font-weight: bold;",`<a href="#" data-micromodal-trigger="my-modal"></a>`),!1};const r=(e,o)=>{s(e);if(!o)return!0;for(var t in o)i(t);return!0};const c=e=>{const t=Object.assign({},{openTrigger:"data-micromodal-trigger"},e);const i=[...document.querySelectorAll(`[${t.openTrigger}]`)];const s=n(i,t.openTrigger);if(!0===t.debugMode&&!1===r(i,s))return;for(var c in s){let e=s[c];t.targetModal=c,t.triggers=[...e],new o(t)}};const a=(e,n)=>{const s=n||{};s.targetModal=e;if(!0===s.debugMode&&!1===i(e))return;t=new o(s);t.showModal()};const l=()=>{t.closeModal()};return{init:c,show:a,close:l}})();export default MicroModal;
